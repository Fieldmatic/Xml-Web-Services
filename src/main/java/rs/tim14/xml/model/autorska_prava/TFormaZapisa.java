//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5.1 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2022.12.10 at 05:55:12 PM CET 
//


package rs.tim14.xml.model.autorska_prava;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for TForma_zapisa.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="TForma_zapisa">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="rukopis"/>
 *     &lt;enumeration value="stampani_tekst"/>
 *     &lt;enumeration value="muzicka_partitura"/>
 *     &lt;enumeration value="zvucni_zapis"/>
 *     &lt;enumeration value="vizuelni_zapis"/>
 *     &lt;enumeration value="audiovizuelni_zapis"/>
 *     &lt;enumeration value="digitalna_forma"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "TForma_zapisa")
@XmlEnum
public enum TFormaZapisa {

    @XmlEnumValue("rukopis")
    RUKOPIS("rukopis"),
    @XmlEnumValue("stampani_tekst")
    STAMPANI_TEKST("stampani_tekst"),
    @XmlEnumValue("muzicka_partitura")
    MUZICKA_PARTITURA("muzicka_partitura"),
    @XmlEnumValue("zvucni_zapis")
    ZVUCNI_ZAPIS("zvucni_zapis"),
    @XmlEnumValue("vizuelni_zapis")
    VIZUELNI_ZAPIS("vizuelni_zapis"),
    @XmlEnumValue("audiovizuelni_zapis")
    AUDIOVIZUELNI_ZAPIS("audiovizuelni_zapis"),
    @XmlEnumValue("digitalna_forma")
    DIGITALNA_FORMA("digitalna_forma");
    private final String value;

    TFormaZapisa(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TFormaZapisa fromValue(String v) {
        for (TFormaZapisa c: TFormaZapisa.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
